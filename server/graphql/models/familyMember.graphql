type FamilyMember{
    id: ID!
    user: User @belongsTo
    family: Family @belongsTo
    role: String!
    created_at: DateTime!
    updated_at: DateTime!
    comment: [Comment!]! @hasMany
    event: [Event!]! @hasMany
    invite: [Invite!]! @hasMany
    like: [Like!]! @hasMany
    post: [Post!]! @hasMany
    toDo: [ToDo!]! @hasMany
}

extend type Mutation @guard(with: ["api"]) {
    createFamilyMember(input: CreateFamilyMemberInput! @spread): FamilyMember @create
    deleteFamilyMember(id: ID!): FamilyMember @delete
    updateFamilyMemberRole(input: UpdateFamilyMemberRoleInput! @spread): FamilyMember @update
}

extend type Query @guard(with:["api"]){
    members(
        where: _ @whereConditions(columns: ["family_id"])
    ):[FamilyMember!]! @all
    families(
        where: _ @whereConditions(columns: ["user_id"])
    ):[FamilyMember!]! @all
}

input CreateFamilyMemberInput{
    user: CreateUserBelongsTo
    family: CreateFamilyBelongsTo
    role: String!
}

input CreateUserBelongsTo{
    connect: ID
    disconnect: Boolean
    delete: Boolean
}
input CreateFamilyBelongsTo{
    connect: ID
    disconnect: Boolean
    delete: Boolean
}

input UpdateFamilyMemberRoleInput{
    id: ID!
    role: String!
}
